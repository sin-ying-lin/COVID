#race
raceTable = table(subData$race[-drop])
#race
raceTableInc = table(subData$race[-drop])
table(subData$race[drop])
#race
race.diff = chisq.test(cbind(table(subData$race[-drop]),
table(subData$race[drop])[,-c(3,5)])) #insig
table(subData$race[drop])[,-c(3,5)]
chisq.test(cbind(table(subData$race[-drop]),
table(subData$race[drop])[,c(1:2,4,6)]))
table(subData$race[drop])
table(subData$race[drop])[1]
able(subData$race[drop])[c(1:2,4,6)]
table(subData$race[drop])[c(1:2,4,6)]
#race
race.diff = chisq.test(cbind(table(subData$race[-drop]),
table(subData$race[drop])[c(1:2,4,6)])) #insig
paste0(round(table(subData$race[-drop])/nrow(subData[-drop,]), 4)*100, '%')
paste0(round(table(subData$race[drop])/
sum(table(subData$race[drop])), 4)*100, '%')
race.table.inc[1:2]
c(race.table.inc[1:2], '0.00%',  race.table.exc[3], '0.00%',  race.table.exc[4])
cbind(table(subData$race[-drop])
table(subData$race[-drop]
paste0(round(table(subData$race[-drop])/nrow(subData[-drop,]), 4)*100, '%')
race.table.inc = paste0(round(table(subData$race[-drop])/nrow(subData[-drop,]), 4)*100, '%')
c(race.table.inc[1:2], '0.00%',  race.table.inc[3], '0.00%',  race.table.inc[4])
race.stats = paste0('X2(',race.diff$parameter,') = ', round(race.diff$statistic, 2),
'; p = ', round(race.diff$p.value, 3) )
race.stats
#ethnicity
eth.diff = chisq.test(cbind(table(subData$eth[-drop]),
table(subData$eth[drop]))) #insig
eth.table.inc = paste0(round(table(subData$eth[-drop])/nrow(subData[-drop,]), 4)*100, '%')
eth.table.exc = paste0(round(table(subData$eth[drop])/
sum(table(subData$eth[drop])), 4)*100, '%')
eth.stats = paste0('X2(',eth.diff$parameter,') = ', round(eth.diff$statistic, 2),
'; p = ', round(eth.diff$p.value, 3) )
#Comparisons between included and excluded samples
incExcComp = data.frame(
INC = c(age.meanSd.inc, gender.table.inc, race.table.inc, eth.table.inc),
EXC = c(age.meanSd.exc, gender.table.exc, race.table.exc, eth.table.exc),
stats = c(age.stats, rep(gender.stats, length(gender.table.inc)),
rep(race.stats, length(race.table.inc)),
rep(eth.stats, length(eth.table.inc)))
)
c(age.meanSd.inc, gender.table.inc, race.table.inc, eth.table.inc)
c(age.meanSd.exc, gender.table.exc, race.table.exc, eth.table.exc)
race.table.inc
race.table.inc = c(race.table.inc[1:2], '0.00%',  race.table.inc[3], '0.00%',  race.table.inc[4])
race.stats = paste0('X2(',race.diff$parameter,') = ', round(race.diff$statistic, 2),
'; p = ', round(race.diff$p.value, 3) )
race.table.inc
race.table.exc
race.table.exc = paste0(round(table(subData$race[drop])/
sum(table(subData$race[drop])), 4)*100, '%')
race.table.exc
#race
race.diff = chisq.test(cbind(table(subData$race[-drop]),
table(subData$race[drop])[c(1:2,4,6)])) #insig
race.table.inc = paste0(round(table(subData$race[-drop])/nrow(subData[-drop,]), 4)*100, '%')
race.table.exc = paste0(round(table(subData$race[drop])/
sum(table(subData$race[drop])), 4)*100, '%')
race.table.inc = c(race.table.inc[1:2], '0.00%',  race.table.inc[3], '0.00%',  race.table.inc[4])
race.stats = paste0('X2(',race.diff$parameter,') = ', round(race.diff$statistic, 2),
'; p = ', round(race.diff$p.value, 3) )
#Comparisons between included and excluded samples
incExcComp = data.frame(
INC = c(age.meanSd.inc, gender.table.inc, race.table.inc, eth.table.inc),
EXC = c(age.meanSd.exc, gender.table.exc, race.table.exc, eth.table.exc),
stats = c(age.stats, rep(gender.stats, length(gender.table.inc)),
rep(race.stats, length(race.table.inc)),
rep(eth.stats, length(eth.table.inc)))
)
rownames(incExcComp) = c('Age',
'Men', 'Women', 'Gender Minority',
'White', 'Black', 'Native', 'Asian', 'Hawaiian/Pacific Islander', 'Multiple',
'Non-Hispanic', 'Hispanic')
write.csv(incExcComp, '../Results/incExcComp.csv', row.names = T)
incExcComp
table(txData_naOmit$txHist.now)/1415
table(txData_naOmit$txHist.past)/1415
table(txData_naOmit$txHist.wanted)/1415
table(txData_naOmit$txHist.neverWanted)/1415
###################################
#Paired T-test with Control Groups#
###################################
txData_naOmit$eth2 = ifelse(txData_naOmit$eth == 0 & txData_naOmit$race == 1, 0, NA)
txData_naOmit$eth2 = ifelse(txData_naOmit$eth == 1, 1, txData_naOmit$eth2)
table(txData_naOmit$eth2)
#Gender (control: men)
descriptive.mentalHealth.gender =
as.data.frame(txData_naOmit %>% group_by(gender) %>% select(colnames(txData_naOmit)[6:11]) %>%
group_map(~descriptive.stats(.x)))
gender.t.test =
txData_naOmit[,c(2:11, 16)] %>%
gather(key = variable, value = value, -c(age, gender, race, eth, eth2)) %>%
group_by(gender, variable) %>%
summarize(value = list(value)) %>%
spread(gender, value) %>%
group_by(variable) %>%
summarize(
t_value_1vs2 = t.test(unlist(`1`), unlist(`2`))$statistic,
p_value_1vs2 = t.test(unlist(`1`), unlist(`2`))$p.value,
t_value_1vs3 = t.test(unlist(`1`), unlist(`3`))$statistic,
p_value_1vs3 = t.test(unlist(`1`), unlist(`3`))$p.value)
gender.t.test =
txData_naOmit[,c(2:11, 16)] %>%
gather(key = variable, value = value, -c(age, gender, race, eth, eth2)) %>%
group_by(gender, variable) %>%
summarize(value = list(value)) %>%
spread(gender, value) %>%
group_by(variable) %>%
summarize(
t_value_1vs2 = t.test(unlist(`1`), unlist(`2`))$statistic,
p_value_1vs2 = t.test(unlist(`1`), unlist(`2`))$p.value,
t_value_1vs3 = t.test(unlist(`1`), unlist(`3`))$statistic,
p_value_1vs3 = t.test(unlist(`1`), unlist(`3`))$p.value)
library(dplyr)
library(purrr)
gender.t.test =
txData_naOmit[,c(2:11, 16)] %>%
gather(key = variable, value = value, -c(age, gender, race, eth, eth2)) %>%
group_by(gender, variable) %>%
summarize(value = list(value)) %>%
spread(gender, value) %>%
group_by(variable) %>%
summarize(
t_value_1vs2 = t.test(unlist(`1`), unlist(`2`))$statistic,
p_value_1vs2 = t.test(unlist(`1`), unlist(`2`))$p.value,
t_value_1vs3 = t.test(unlist(`1`), unlist(`3`))$statistic,
p_value_1vs3 = t.test(unlist(`1`), unlist(`3`))$p.value)
library(tidyr)
#Gender (control: men)
descriptive.mentalHealth.gender =
as.data.frame(txData_naOmit %>% group_by(gender) %>% select(colnames(txData_naOmit)[6:11]) %>%
group_map(~descriptive.stats(.x)))
gender.t.test =
txData_naOmit[,c(2:11, 16)] %>%
gather(key = variable, value = value, -c(age, gender, race, eth, eth2)) %>%
group_by(gender, variable) %>%
summarize(value = list(value)) %>%
spread(gender, value) %>%
group_by(variable) %>%
summarize(
t_value_1vs2 = t.test(unlist(`1`), unlist(`2`))$statistic,
p_value_1vs2 = t.test(unlist(`1`), unlist(`2`))$p.value,
t_value_1vs3 = t.test(unlist(`1`), unlist(`3`))$statistic,
p_value_1vs3 = t.test(unlist(`1`), unlist(`3`))$p.value)
#Race (Control: Caucasian)
descriptive.mentalHealth.race =
as.data.frame(txData_naOmit%>% group_by(race) %>%
select(colnames(txData_naOmit)[6:11]) %>%
group_map(~descriptive.stats(.x)))
race.t.test =
txData_naOmit[ ,c(2:11,16)] %>%
gather(key = variable, value = value, -c(age, gender, race, eth, eth2)) %>%
group_by(race, variable) %>%
summarize(value = list(value)) %>%
spread(race, value) %>%
group_by(variable) %>%
summarize(
t_value_1vs2 = t.test(unlist(`1`), unlist(`2`))$statistic,
p_value_1vs2 = t.test(unlist(`1`), unlist(`2`))$p.value,
t_value_1vs3 = t.test(unlist(`1`), unlist(`3`))$statistic,
p_value_1vs3 = t.test(unlist(`1`), unlist(`3`))$p.value,
t_value_1vs4 = t.test(unlist(`1`), unlist(`4`))$statistic,
p_value_1vs4 = t.test(unlist(`1`), unlist(`4`))$p.value,
t_value_1vs5 = t.test(unlist(`1`), unlist(`5`))$statistic,
p_value_1vs5 = t.test(unlist(`1`), unlist(`5`))$p.value,
t_value_1vs6 = t.test(unlist(`1`), unlist(`6`))$statistic,
p_value_1vs6 = t.test(unlist(`1`), unlist(`6`))$p.value)
txData_naOmit[,c(2:11, 16)]
race.t.test =
txData_naOmit[ ,c(2:11,16)] %>%
gather(key = variable, value = value, -c(age, gender, race, eth, eth2)) %>%
group_by(race, variable) %>%
summarize(value = list(value)) %>%
spread(race, value) %>%
group_by(variable) %>%
summarize(
t_value_1vs2 = t.test(unlist(`1`), unlist(`2`))$statistic,
p_value_1vs2 = t.test(unlist(`1`), unlist(`2`))$p.value,
t_value_1vs4 = t.test(unlist(`1`), unlist(`4`))$statistic,
p_value_1vs4 = t.test(unlist(`1`), unlist(`4`))$p.value,
t_value_1vs6 = t.test(unlist(`1`), unlist(`6`))$statistic,
p_value_1vs6 = t.test(unlist(`1`), unlist(`6`))$p.value)
race.t.test
#Ethnicity (Control: Non-Hispanic)
descriptive.mentalHealth.eth =
as.data.frame(txData_naOmit %>%
filter(!(is.na(eth2))) %>%
group_by(eth2) %>%
select(colnames(txData_naOmit)[6:11]) %>%
group_map(~descriptive.stats(.x)))
eth.t.test =
txData_naOmit %>%
select(colnames(txData_naOmit)[c(2:11,16)]) %>%
gather(key = variable, value = value, -c( age, gender, race, eth, eth2)) %>%
group_by(eth2, variable) %>%
summarize(value = list(value)) %>%
spread(eth2, value) %>%
group_by(variable) %>%
summarize(
t_value_0vs1 = t.test(unlist(`0`), unlist(`1`))$statistic,
p_value_0vs1 = t.test(unlist(`0`), unlist(`1`))$p.value)
#Table Formation
addStar = function(x, y){
if(is.na(x)) NA else
if(x < 0.001/y) '***' else
if(x <0.01/y) '**' else
if(x<.05/y) '*' else
''
}
for(x in c('gender', 'race', 'eth')){
p_value  =
get(paste0( x,'.t.test')) %>%  select(contains('p_value'))
table.star =
as.data.frame(apply(p_value, c(1,2), addStar, 6))
rownames(table.star) = get(paste0( x,'.t.test'))$variable
table.meanSd = get(paste0('descriptive.mentalHealth.', x)) %>% select(contains('mean'))
assign(paste0('table.comparisons.', x),
if(ncol(p_value) >1) {
data.frame(table.meanSd[,1],
as.data.frame(map2(table.meanSd[,-1],
table.star[rownames(table.meanSd),], paste0)))
}else
data.frame(table.meanSd[,1],
paste0(table.meanSd[,-1], table.star[rownames(table.meanSd),]))
)
}
table.comparisons = cbind(table.comparisons.gender,
table.comparisons.race,
table.comparisons.eth)
rownames(table.comparisons) = c('Baseline', 'PHQ', 'GAD', 'IUS', 'PTSD', 'Severity')
colnames(table.comparisons) = c('Men', 'Women', 'Minority',
'Caucasian', 'Black', 'Native', 'Asian', 'Pacific Islander', 'Multiple',
'Non-Hispanic White', 'Hispanic')
colnames(table.comparisons) = c('Men', 'Women', 'Minority',
'Caucasian', 'Black', 'Native', 'Asian', 'Multiple',
'Non-Hispanic White', 'Hispanic')
colnames(table.comparisons) = c('Men', 'Women', 'Minority',
'Caucasian', 'Black', 'Asian', 'Multiple',
'Non-Hispanic White', 'Hispanic')
table.comparisons
write.csv(table.comparisons, '../Results/mentalHealthDemoComparisons.csv', row.names = T)
gender.t.test
gender.t.test[,c(3,5)]
round(gender.t.test[,c(3,5)],3)
cbind(gender.t.test[,1], round(gender.t.test[,c(3,5)],3))
race.t.test
eth.t.test
0.05/6
model.comparisons
o
o
model.comparisons = matrix(NA, ncol = 5, nrow = 2)
a = 0
for(x in model_names){
a = a+1
perf = get(x)$results
accu = perf[1,2]
kappa = perf[1,3]
accu.SD = perf [1,4]
kappa.SD = perf [1,5]
model.comparisons[1:2,a] =
c(paste0(round(accu, 4),'(', round(accu.SD,2),')'),
paste0(round(kappa, 4),'(', round(kappa.SD,2), ')'))
}
colnames(model.comparisons) = model_names
rownames(model.comparisons) = c('Accuracy+-SE ', 'Kappa+-SE')
model.comparisons
M0
M1
model_names = c()
for(i in 0:4){
model_names = c(model_names, paste0('M', i))}
model.comparisons = matrix(NA, ncol = 5, nrow = 2)
a = 0
for(x in model_names){
a = a+1
perf = get(x)$results
accu = perf[1,2]
kappa = perf[1,3]
accu.SD = perf [1,4]
kappa.SD = perf [1,5]
model.comparisons[1:2,a] =
c(paste0(round(accu, 4),'(', round(accu.SD,2),')'),
paste0(round(kappa, 4),'(', round(kappa.SD,2), ')'))
}
colnames(model.comparisons) = model_names
rownames(model.comparisons) = c('Accuracy+-SE ', 'Kappa+-SE')
model.comparisons
M5 = train(txHist.now ~ overallSev + baseline + txHist.past,
txData_naOmit_std, method = 'glm', family= 'binomial',
trControl = train.control)
M5
M5 = train(txHist.now ~ overallSev ,
txData_naOmit_std, method = 'glm', family= 'binomial',
trControl = train.control)
M5
train.control = trainControl(method = 'repeatedcv', number = 5, repeats = 100,
sampling = 'smote', returnResamp = 'all', returnData = T,
seeds = .Random.seed[1:501])
M5 = train(txHist.now ~ overallSev + baseline + txHist.past,
txData_naOmit_std, method = 'glm', family= 'binomial',
trControl = train.control)
M5
summary(M5)
summary(M5)
M4
M5
M0
M5$results
txData_naOmit_std
str(+ baseline + txHist.past)
M4
M5
M5$bestTune
M5$trainingData
M5$resampledCM
M5$resample
set.seed(123)
M5 = train(txHist.now ~ overallSev + baseline + txHist.past,
txData_naOmit_std, method = 'glm', family= 'binomial',
trControl = train.control)
summary(M5)
M5
#M2 + interaction terms
M4 = train(txHist.now ~ (overallSev)*(gender + race + eth) + baseline + txHist.past,
txData_naOmit_std, method = 'glm', family= 'binomial',
trControl = train.control)
train.control = trainControl(method = 'repeatedcv', number = 5, repeats = 100,
sampling = 'smote', returnResamp = 'all', returnData = T,
seeds = .Random.seed[1:501])
M4
M5
est_g
est
est_g
colnames(est)
str(est)
apply(est, 2, kurtosis)
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
apply(est, 2, kurtosis)
apply(est, 1, kurtosis)
apply(est, 1, kurtosis, method='sample')
apply(est, 1, kurtosis, method='fisher')
apply(est, 1, kurtosis, method='sample')
apply(est, 1, kurtosis, method='fisher')
apply(est, 1, kurtosis, method='moment')
?dnorm
rorm(500, mean = 0, sd =1 )
rnorm(500, mean = 0, sd =1 )
kurtosis(rnorm(500, mean = 0, sd =1 ), method='moment')
kurtosis(rnorm(500, mean = 0, sd =2 ), method='moment')
kurtosis(rnorm(500, mean = 0, sd =3 ), method='moment')
kurtosis(rnorm10500, mean = 0, sd =3 ), method='moment')
kurtosis(rnorm(1000, mean = 0, sd =3 ), method='moment')
kurtosis(rnorm(1000, mean = 0, sd =10 ), method='moment')
kurtosis(rnorm(1000, mean = 0, sd =11 ), method='moment')
kurtosis(rnorm(1000, mean = 0, sd =1 ), method='moment')
range(apply(est, 1, kurtosis, method='moment'))
mean(apply(est, 1, kurtosis, method='moment'))
sd(apply(est, 1, kurtosis, method='moment'))
range(apply(est, 1, kurtosis, method='moment'))
apply(est, 1, kurtosis, method='moment')
mean(apply(est, 1, kurtosis, method='moment'))
library(ggplot2)
est = as.data.frame(t(est))
colnames(est) = rownames(final_model_table)
est_g =
est %>%
gather(key = 'key', value = 'value') %>%
mutate(key_f= factor(key, levels = colnames(est),
labels = c('Intercept', 'Internalizing problem severity', 'Woman',
'Non-Binary Gender identities',
'Black', 'Asian', 'Multiracial', 'Hispanic/Latinx',
'Pre-pandemic mental health',
'Past treatment use', 'INT*Woman', 'INT*Non-binary',
'INT**Balck', 'INT*Asian', 'INT*Multiracial',
'INT*Hispanic/Latinx')))
library(dplyr)
est_g =
est %>%
gather(key = 'key', value = 'value') %>%
mutate(key_f= factor(key, levels = colnames(est),
labels = c('Intercept', 'Internalizing problem severity', 'Woman',
'Non-Binary Gender identities',
'Black', 'Asian', 'Multiracial', 'Hispanic/Latinx',
'Pre-pandemic mental health',
'Past treatment use', 'INT*Woman', 'INT*Non-binary',
'INT**Balck', 'INT*Asian', 'INT*Multiracial',
'INT*Hispanic/Latinx')))
library(tidyr)
colnames(est) = rownames(final_model_table)
est_g =
est %>%
gather(key = 'key', value = 'value') %>%
mutate(key_f= factor(key, levels = colnames(est),
labels = c('Intercept', 'Internalizing problem severity', 'Woman',
'Non-Binary Gender identities',
'Black', 'Asian', 'Multiracial', 'Hispanic/Latinx',
'Pre-pandemic mental health',
'Past treatment use', 'INT*Woman', 'INT*Non-binary',
'INT**Balck', 'INT*Asian', 'INT*Multiracial',
'INT*Hispanic/Latinx')))
plot =
ggplot(est_g, aes(x = value)) +
geom_histogram() +
facet_wrap(~key_f ) +
labs(x ="Lostistic Regression Coefficient",
y = "Count")+
theme_minimal()
colnames(est)
library(PerformanceAnalytics)
apply(est, 1, kurtosis, method='moment')
mean(apply(est, 1, kurtosis, method='moment'))
range(apply(est, 1, kurtosis, method='moment'))
ggsave('../Results/coefficients.pdf',plot, height = 11, width = 11)
plot =
ggplot(est_g, aes(x = value)) +
geom_histogram() +
facet_wrap(~key_f ) +
labs(x ="Logistic Regression Coefficient",
y = "Count")+
theme_minimal()
colnames(est)
library(PerformanceAnalytics)
apply(est, 1, kurtosis, method='moment')
mean(apply(est, 1, kurtosis, method='moment'))
range(apply(est, 1, kurtosis, method='moment'))
ggsave('../Results/coefficients.pdf',plot, height = 11, width = 11)
cohen.d(unlist(`1`), unlist(`3`))$estimate
cohen.d(txData_naOmit$PHQ.mean[txData_naOmit$gender == 0], txData_naOmit$PHQ.mean[txData_naOmit$gender == 1] )
?cohen.d
library(stats)
?cohen.d
library(effsize)
cohen.d(txData_naOmit$PHQ.mean[txData_naOmit$gender == 0], txData_naOmit$PHQ.mean[txData_naOmit$gender == 1] )
a = cohen.d(txData_naOmit$PHQ.mean[txData_naOmit$gender == 0], txData_naOmit$PHQ.mean[txData_naOmit$gender == 1] )
a$estimate
a$conf.int
gender.t.test =
txData_naOmit[,c(2:11, 16)] %>%
gather(key = variable, value = value, -c(age, gender, race, eth, eth2)) %>%
group_by(gender, variable) %>%
summarize(value = list(value)) %>%
spread(gender, value) %>%
group_by(variable) %>%
summarize(
t_value_1vs2 = t.test(unlist(`1`), unlist(`2`))$statistic,
p_value_1vs2 = t.test(unlist(`1`), unlist(`2`))$p.value,
t_value_1vs3 = t.test(unlist(`1`), unlist(`3`))$statistic,
p_value_1vs3 = t.test(unlist(`1`), unlist(`3`))$p.value,
d_value_1vs2 = cohen.d(unlist(`1`), unlist(`2`))$estimate,
d_value_1vs2low = cohen.d(unlist(`1`), unlist(`2`))$conf.int[1],
d_value_1vs2high = cohen.d(unlist(`1`), unlist(`2`))$conf.int[2],
d_value_1vs3 = cohen.d(unlist(`1`), unlist(`3`))$estimate,
d_value_1vs3low = cohen.d(unlist(`1`), unlist(`3`))$conf.int[1],
d_value_1vs3high = cohen.d(unlist(`1`), unlist(`3`))$conf.int[2]
)
race.t.test =
txData_naOmit[ ,c(2:11,16)] %>%
gather(key = variable, value = value, -c(age, gender, race, eth, eth2)) %>%
group_by(race, variable) %>%
summarize(value = list(value)) %>%
spread(race, value) %>%
group_by(variable) %>%
summarize(
t_value_1vs2 = t.test(unlist(`1`), unlist(`2`))$statistic,
p_value_1vs2 = t.test(unlist(`1`), unlist(`2`))$p.value,
t_value_1vs4 = t.test(unlist(`1`), unlist(`4`))$statistic,
p_value_1vs4 = t.test(unlist(`1`), unlist(`4`))$p.value,
t_value_1vs6 = t.test(unlist(`1`), unlist(`6`))$statistic,
p_value_1vs6 = t.test(unlist(`1`), unlist(`6`))$p.value,
d_value_1vs2 = cohen.d(unlist(`1`), unlist(`2`))$estimate,
d_value_1vs2low = cohen.d(unlist(`1`), unlist(`2`))$conf.int[1],
d_value_1vs2high = cohen.d(unlist(`1`), unlist(`2`))$conf.int[2],
d_value_1vs4 = cohen.d(unlist(`1`), unlist(`4`))$estimate,
d_value_1vs4low = cohen.d(unlist(`1`), unlist(`4`))$conf.int[1],
d_value_1vs4high = cohen.d(unlist(`1`), unlist(`4`))$conf.int[2],
d_value_1vs6 = cohen.d(unlist(`1`), unlist(`6`))$estimate,
d_value_1vs6low = cohen.d(unlist(`1`), unlist(`6`))$conf.int[1],
d_value_1vs6high = cohen.d(unlist(`1`), unlist(`6`))$conf.int[2])
eth.t.test =
txData_naOmit %>%
select(colnames(txData_naOmit)[c(2:11,16)]) %>%
gather(key = variable, value = value, -c( age, gender, race, eth, eth2)) %>%
group_by(eth2, variable) %>%
summarize(value = list(value)) %>%
spread(eth2, value) %>%
group_by(variable) %>%
summarize(
t_value_0vs1 = t.test(unlist(`0`), unlist(`1`))$statistic,
p_value_0vs1 = t.test(unlist(`0`), unlist(`1`))$p.value,
d_value_0vs1 = cohen.d(unlist(`0`), unlist(`1`))$estimate,
d_value_0vs1low = cohen.d(unlist(`0`), unlist(`1`))$conf.int[1],
d_value_0vs1high = cohen.d(unlist(`0`), unlist(`1`))$conf.int[2],)
gender.t.test
gender.t.test[,c(1,7:9)]
gender.t.test[,c(1,9:11)]
descriptive.mentalHealth.race
race.t.test
race.t.test[,c(1,10)]
race.t.test[,c(1,12)]
race.t.test[,c(1,11:13)]
race.t.test[,c(1,14:16)]
eth.t.test
library(PerformanceAnalytics)
